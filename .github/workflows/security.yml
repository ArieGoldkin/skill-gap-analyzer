name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # =============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # =============================================================================
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # =============================================================================
  # CODE SECURITY ANALYSIS
  # =============================================================================
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  # =============================================================================
  # SECRET SCANNING
  # =============================================================================
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # =============================================================================
  # SECURITY POLICY COMPLIANCE
  # =============================================================================
  compliance-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "⚠️  SECURITY.md file not found"
            echo "Consider adding a security policy to help users report vulnerabilities"
          else
            echo "✅ Security policy found"
          fi

      - name: Check for dependabot configuration
        run: |
          if [ ! -f .github/dependabot.yml ]; then
            echo "⚠️  Dependabot configuration not found"
            echo "Consider enabling automated dependency updates"
          else
            echo "✅ Dependabot configuration found"
          fi

      - name: Verify environment file patterns
        run: |
          echo "Checking for accidentally committed secrets..."

          # Check if any .env files are tracked
          if git ls-files | grep -E "\.env$|\.env\.local$|\.env\.production$"; then
            echo "❌ Environment files found in git history!"
            echo "These files may contain secrets and should not be committed"
            exit 1
          else
            echo "✅ No environment files found in git"
          fi

      - name: Check for hardcoded secrets
        run: |
          echo "Scanning for potential hardcoded secrets..."

          # Basic patterns for common secrets
          if grep -r -E "(api_key|apikey|secret|password|token)" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" . | grep -v "example" | grep -v "placeholder" | grep -v "your_" | grep -v "TODO"; then
            echo "⚠️  Potential hardcoded secrets found"
            echo "Please review the above matches and ensure no real secrets are committed"
          else
            echo "✅ No obvious hardcoded secrets found"
          fi
